//Librerias
import axios from 'axios';
import { useRouter } from 'next/router';
import LinearProgress from '@material-ui/core/LinearProgress';
//Componentes
import Loader from '../../../components/Loader/Loader';
import AdminLayout from '../../../components/Layouts/AdminLayout';
import InfoPaciente from '../../../components/Admin/InfoPagePaciente/InfoPaciente';
import { getEdad } from '../../../components/utils/utils';

export const getStaticPaths = async () => {
  const {
    data: { data },
  } = await axios.get(`${process.env.apiURL}/getpacientes`);

  const paths = data.map(({ paciente_id }) => ({
    params: { id: paciente_id.toString() },
  }));

  return {
    paths: paths,
    fallback: true,
  };
};
export const getStaticProps = async ({ params }) => {
  const { data: paciente } = await axios.get(
    `${process.env.apiURL}/pacientes/${params?.id}`
  );
  const { data: etnia } = await axios.get(
    `${process.env.apiURL}/getetnia/${params?.id}`
  );
  const { data: tipo_sangre } = await axios.get(
    `${process.env.apiURL}/gettiposangre/${params?.id}`
  );
  const { data: estado_civil } = await axios.get(
    `${process.env.apiURL}/getestadocivil/${params?.id}`
  );

  return {
    props: {
      paciente,
    },
    revalidate: 1, //se refresca cada 1 segundo
  };
};

const index = ({ paciente }) => {
  const router = useRouter();

  if (router.isFallback) {
    return (
      <AdminLayout>
        <LinearProgress />
        <Loader />
      </AdminLayout>
    );
  }
  return (
    <AdminLayout>
      <InfoPaciente paciente={paciente} getEdad={getEdad} />
    </AdminLayout>
  );
};

export default index;

//Revisa si un elemento ya esta en el diagnostico funcion alternativa sin lodash
  /*const subcategoriaExiste = (elemento) => {
    let verificacion = false;
    for (let i = 0; i < enfermedades.length; i++) {
      if (enfermedades[i].codigo == elemento.codigo) {
        verificacion = true;
        break;
      }
    }
    return verificacion;
  };*/


  useMemo(() => {
    const fetchCategorias = async () => {
      const {
        data: { data: categorias },
      } = await axios.get(
        `${process.env.apiURL}/categoriascodigo/${categoriasQuery}`
      );
      setcategoriasResults(categorias);
    };
    const fetchSubcategorias = async () => {
      const {
        data: { data: subcategorias },
      } = await axios.get(
        `${process.env.apiURL}/subcategoriascodigo/${subcategoriasQuery}`
      );
      setsubCategoriasRestuls(subcategorias);
    };

    categoriasQuery.length >= 2 && categoriasQuery.length <= 4
      ? fetchCategorias()
      : setcategoriasResults([]);

    subcategoriasQuery.length >= 3
      ? fetchSubcategorias()
      : setsubCategoriasRestuls([]);
  }, [categoriasQuery, subcategoriasQuery]);
